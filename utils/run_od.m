function score = run_od(...
    model,...
    n_outputs,...
    input_names,...
    input_ranges,...
    opt,...
    sim_opt...
)
    
    for r = 1:opt.repeat
        sim_time = sim_opt.simulation_time;
        test_suite_size = opt.n_tests;
        test_suite_complexity = zeros(test_suite_size, size(input_names,2));
        test_suite_complexity(:,:) = 1;

        n_step = (sim_time / sim_opt.samp_time);

        % record test suite FB coverage
        test_suite_FB_cov = zeros(n_outputs);

        % test generation time out
        test_generation_time_out = 600;

        % define tweak parameters
        tweak_sigma_exploration = 0.5;
        tweak_sigma_exploitation = 0.05;
        tweak_sigma_FB = zeros(n_outputs, 1);

        for count = 1:n_outputs
            test_suite_complexity_all_FB(count,:,:) = test_suite_complexity(:,:);
        end
        
        for i = 1:size(input_names,2)
            input_types{i} = 'f';
            input_min(i) = input_ranges(i,1);
            input_max(i) = input_ranges(i,2);
        end
        
        % start main OD function here
        test_suite = Fn_GenerateARandomTestSuite(...
            size(input_names,2),...
            input_names,...
            input_types,...
            input_min,...
            input_max,...
            reshape(test_suite_complexity_all_FB(1,:,:), size(test_suite_complexity_all_FB, 2), size(test_suite_complexity_all_FB, 3)),...
            test_suite_size,...
            sim_time,...
            sim_opt.samp_time...
        );
    
        % create storage to store the best found and coverage information
        max_test_suite_ODFB = zeros(n_outputs, 1);
        init_ts_cov_val_FB = zeros(n_outputs, 1);
        
        % storage
        for ocnt = 1:n_outputs
            tweak_sigma_FB(ocnt) = tweak_sigma_exploration;
            cur_solution_FB{ocnt} = test_suite;
            best_solution_FB{ocnt} = test_suite;
        end
        
        % start generation loop
        tic;
        loop_count = 1;
        
        while (toc < test_generation_time_out)
            disp(loop_count)
            
            for ocnt = 1:n_outputs
                test_suite = cur_solution_FB{ocnt};
                
                % evaluate test suite
                [test_suite_output, ts_cov] = od_evaluate_test_suite(...
                    model,...
                    test_suite,...
                    input_types,...
                    n_step,...
                    n_outputs,...
                    sim_time,...
                    sim_opt.samp_time,...
                    ocnt...
                );
                
                % calculate coverage information
                if (loop_count == 1)
                    decision_init_ts_cov = decisioninfo(ts_cov, strrep(model, '.mdl', ''));
                    init_ts_cov_val_FB(ocnt) = decision_init_ts_cov(1)/decision_init_ts_cov(2);
                    accts_cov_FB{ocnt} = ts_cov;
                    accts_cov_loop_FB{ocnt}{loop_count} = ts_cov;
                else
                    accts_cov_FB{ocnt} = accts_cov_FB{ocnt} + ts_cov;
                    accts_cov_loop_FB{ocnt}{loop_count} = accts_cov_FB{ocnt};
                end
                
                test_suite_features = Fn_ComputeTestSuiteFeatures(test_suite_output);
                test_suite_OD = Fn_ComputeTestSuiteOD('features',test_suite_features);
                
                % replace strategy
                if (test_suite_OD >= max_test_suite_ODFB(ocnt))
                    max_test_suite_ODFB(ocnt) = test_suite_OD;
                    best_solution_FB{ocnt} = cur_solution_FB{ocnt};
                    test_suite_FB{ocnt} = cur_solution_FB{ocnt};
                    decision_init_ts_cov = decisioninfo(ts_cov, strrep(model, '.mdl', ''));
                    test_suite_FB_cov(ocnt) = decision_init_ts_cov(1) / decision_init_ts_cov(2);
                end
            end

            tweak_sigma_FB = Fn_AdaptTweakParameter(...
                model,...
                n_outputs,...
                ones(n_outputs,1),...
                accts_cov_FB,...
                init_ts_cov_val_FB,...
                tweak_sigma_FB,...
                tweak_sigma_exploration,...
                tweak_sigma_exploitation...
            );
        
            test_suite_complexity_all_FB(:,:,:) = Fn_AdaptComplexity1(...
                model,...
                n_outputs,...
                ones(n_outputs,1),...
                accts_cov_loop_FB,...
                loop_count,...
                5,...
                squeeze(test_suite_complexity_all_FB(:,:,:))...
            );
            
            for ocnt = 1:n_outputs
                test_suite = Fn_TweakATestSuite1(...
                    best_solution_FB{ocnt},...
                    tweak_sigma_FB(ocnt),...
                    size(input_names,2),...
                    input_types,...
                    input_min,...
                    input_max,...
                    squeeze(test_suite_complexity_all_FB(ocnt,:,:)),...
                    test_suite_size,...
                    sim_time,...
                    sim_opt.samp_time...
                );

                cur_solution_FB{ocnt} = test_suite;
            end

            loop_count = loop_count + 1;
        end
        
        % for the best solution, apply mutation testing
        total_score = 0;
        for ocnt = 1:n_outputs
            temp_test_suite = best_solution_FB{ocnt};
            temp_score = od_mutation_check(...
                model,...
                temp_test_suite,...
                input_types,...
                n_step,...
                n_outputs,...
                sim_time,...
                sim_opt.samp_time...
            );
        
            total_score = total_score + temp_score;
        end
        
        score(r) = total_score / n_outputs;
        display(score)
    end
end
        
        
            
        