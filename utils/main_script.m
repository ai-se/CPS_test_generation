% main script to run different algorithm
% params:
%     Input:
%     - model: the model will be run in this experiment
%     - input_names: the name of simulator inputs
%     - categorical: the list of indexes of categorical input(s)
%     - input_ranges: the range of inputs
%     - cur_mode: current executed algorithm
%     - opt: algorithm options
%     - sim_opt: simulation options
%
%     Output:
%     - score: the 1*n array where n is number of repeat

function score = main_script(...
    model,...
    n_outputs,...
    input_names,...
    input_ranges,...
    categorical,...
    cur_mode,...
    opt,...
    sim_opt...
)   
    disp('Algorithm:')
    disp(cur_mode)
    disp('------------------------')
    
    % for epicurus, repeats are done inside, so no need to loop here
    % for random and clustering, repeat here
    if strcmp(cur_mode, "epicurus")
        score = run_epicurus(...
            model,...
            input_names,...
            input_ranges,...
            categorical,...
            opt,...
            sim_opt...
        );
    elseif strcmp(cur_mode, "od")
        score = run_od(...
            model,...
            n_outputs,...
            input_names,...
            input_ranges,...
            opt,...
            sim_opt...
        );
    else
        % initialize storage
        score = zeros(1, opt.repeat);
        
        for run = 1: opt.repeat
            disp(['Iteration: ', num2str(run), '/', num2str(opt.repeat)]);

            if strcmp(cur_mode, "random")
                score(run) = random_algo(...
                    model,...
                    input_names,...
                    input_ranges,...
                    categorical,...
                    opt,...
                    sim_opt...
                );
            else
                score(run) = clustering(...
                    model,...
                    input_names,...
                    input_ranges,...
                    categorical,...
                    opt,...
                    sim_opt...
                );
            end  
        end
    end